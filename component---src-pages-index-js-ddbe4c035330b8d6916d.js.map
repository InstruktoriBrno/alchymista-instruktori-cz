{"version":3,"sources":["webpack:///./src/containers/splitHeadings.js","webpack:///./src/containers/Faq.js","webpack:///./src/containers/SubmitError.js","webpack:///./src/containers/RegisterForm.js","webpack:///./src/containers/Info.js","webpack:///./src/containers/Footer.js","webpack:///./src/containers/About.js","webpack:///./src/containers/Fragments.js","webpack:///./src/containers/Team.js","webpack:///./src/containers/Contact.js","webpack:///./src/containers/Gallery.js","webpack:///./src/containers/ContactFiller.js","webpack:///./src/containers/Pandemic.js","webpack:///./src/pages/index.js"],"names":["ast","level","isHeading","type","tagName","children","firstHeadingIndex","findIndex","sections","index","length","node","push","heading","slice","renderNodes","renderMarkdown","htmlAst","faq","childMarkdownRemark","splitHeadings","preface","map","key","title","contact","site","siteMetadata","href","formAction","formFields","name","email","message","registerAst","registerText","onSubmit","values","submitForm","catch","FORM_ERROR","initialValues","photoConsent","handleSubmit","valid","submitSucceeded","submitFailed","submitting","left","label","placeholder","validate","required","component","StringInput","right","validEmail","area","SubmitError","submit","disabled","info","concat","author","year","text","createMarkdownRenderer","p","isTitle","fragments","fluidImages","frontmatter","images","childImageSharp","fluid","childNodes","find","filter","edges","team","photo","image","fbEventId","outline","icon","faEnvelope","faFacebookF","fixed","rows","IndexPage","subtitle","basicInfo","brand","navlinks","about","register","more","actionLink","actionText","items","About","Fragments","Pandemic","Info","Gallery","narrow","RegisterForm","Faq","Team","ContactFiller","Contact","Footer"],"mappings":"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","file":"component---src-pages-index-js-ddbe4c035330b8d6916d.js","sourcesContent":["export default (ast, level = 2) => {\n    const isHeading = ({type, tagName}) => type === 'element' && tagName === `h${level}`;\n\n    const {children} = ast;\n    const firstHeadingIndex = children.findIndex(isHeading);\n\n    const sections = [];\n    for (let index = firstHeadingIndex; index < children.length; index += 1) {\n        const node = children[index];\n        if (isHeading(node)) {\n            sections.push({heading: node, children: []});\n        } else {\n            sections[sections.length - 1].children.push(node);\n        }\n    }\n\n    return [\n        children.slice(0, firstHeadingIndex),\n        sections,\n    ];\n};\n","import React from 'react';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport {FaqContainer, FaqItem, renderMarkdown} from '../components';\nimport splitHeadings from './splitHeadings';\n\nconst renderNodes = (children) => renderMarkdown({type: 'root', children});\n\nexport default () => {\n    const {faq: {childMarkdownRemark: {htmlAst}}} = useStaticQuery(graphql`\n        query {\n            faq: file(relativePath: {eq: \"faq.md\"}) {\n                childMarkdownRemark {\n                    htmlAst\n                }\n            }\n        }\n    `);\n    const [preface, sections] = splitHeadings(htmlAst, 2);\n\n    return (\n        <>\n            {renderNodes(preface)}\n            <FaqContainer>\n                {sections.map(({heading, children}, index) => (\n                    // nothing else to use but index\n                    // eslint-disable-next-line react/no-array-index-key\n                    <FaqItem key={index} title={renderNodes(heading.children)}>\n                        {renderNodes(children)}\n                    </FaqItem>\n                ))}\n            </FaqContainer>\n        </>\n    );\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {Alert} from '../components';\n\nexport default () => {\n    const {site: {siteMetadata: {contact}}} = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    contact\n                }\n            }\n        }\n    `);\n\n    return (\n        <Alert>Přihlášení se nepodařilo. Zkus to znova a nebo nám napiš na <a href={`mailto:${contact}`}>{contact}</a>.</Alert>\n    );\n};\n","import React from 'react';\nimport {Form as FinalForm} from 'react-final-form';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {\n    Box,\n    Button,\n    Form,\n    FormField,\n    FormSection,\n    renderMarkdown,\n    SideBySide,\n    Spinner,\n    StringInput,\n} from '../components';\nimport {required, submitForm, validEmail} from '../utils';\nimport SubmitError from './SubmitError';\nimport {FORM_ERROR} from 'final-form';\n\nexport default () => {\n    const {\n        site: {siteMetadata: {formAction, formFields: {name, email, message}}},\n        registerText: {childMarkdownRemark: {htmlAst: registerAst}},\n    } = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    formAction\n                    formFields {\n                        name\n                        email\n                        message\n                    }\n                }\n            }\n            registerText: file(relativePath: {eq: \"register.md\"}) {\n                childMarkdownRemark {\n                    htmlAst\n                }\n            }\n        }\n    `);\n\n    return (\n        <FormSection>\n            {renderMarkdown(registerAst)}\n            <FinalForm\n                onSubmit={(values) => submitForm(formAction, {\n                    [name]: values.name,\n                    [email]: values.email,\n                    [message]: values.message,\n                }).catch(() => ({[FORM_ERROR]: 'cannot register'}))}\n                initialValues={{photoConsent: true}}\n            >\n                {({handleSubmit, valid, submitSucceeded, submitFailed, submitting}) => (\n                    <Form onSubmit={handleSubmit}>\n                        <SideBySide\n                            left={(\n                                <FormField\n                                    label=\"Jméno a příjmení\"\n                                    placeholder=\"Tvoje jméno\"\n                                    name=\"name\"\n                                    validate={[required]}\n                                    component={StringInput}\n                                />\n                            )}\n                            right={(\n                                <FormField\n                                    label=\"E-mail\"\n                                    placeholder=\"Tvůj e-mail\"\n                                    name=\"email\"\n                                    validate={[required, validEmail]}\n                                    component={StringInput}\n                                />\n                            )}\n                        />\n                        <FormField\n                            name=\"message\"\n                            placeholder=\"Chceš nám něco vzkázat?\"\n                            component={StringInput}\n                            area\n                        />\n                        {submitFailed && <SubmitError />}\n                        {submitSucceeded || (\n                            <Button submit disabled={!valid || submitting}>\n                                {submitting && <Spinner />}\n                                {submitting && ' '}\n                                Přihlásit se\n                            </Button>\n                        )}\n                        {submitSucceeded && <Box>Díky za tvou přihlášku. Co nevidět se ti ozveme.</Box>}\n                    </Form>\n                )}\n            </FinalForm>\n        </FormSection>\n    );\n};\n","import React from 'react';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport {TwoColumn, renderMarkdown, Unbreakable} from '../components';\nimport splitHeadings from './splitHeadings';\n\nconst renderNodes = (children) => renderMarkdown({type: 'root', children});\n\nexport default () => {\n    const {info: {childMarkdownRemark: {htmlAst}}} = useStaticQuery(graphql`\n        query {\n            info: file(relativePath: {eq: \"info.md\"}) {\n                childMarkdownRemark {\n                    htmlAst\n                }\n            }\n        }\n    `);\n    const [preface, sections] = splitHeadings(htmlAst, 2);\n    return (\n        <>\n            {renderNodes(preface)}\n            <TwoColumn>\n                {sections.map(({heading, children}, index) => (\n                    // nothing else to use but index\n                    // eslint-disable-next-line react/no-array-index-key\n                    <Unbreakable key={index}>\n                        {renderNodes([heading].concat(children))}\n                    </Unbreakable>\n                ))}\n            </TwoColumn>\n        </>\n    );\n};\n","import React from 'react';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport {Footer, renderMarkdown} from '../components';\n\nexport default () => {\n    const {\n        site: {siteMetadata: {author, year}},\n        text: {childMarkdownRemark: {htmlAst}},\n    } = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    author\n                    year\n                }\n            }\n            text: file(relativePath: {eq: \"footer.md\"}) {\n                childMarkdownRemark {\n                    htmlAst\n                }\n            }\n        }\n    `);\n    return (\n        <Footer\n            author={author}\n            year={year}\n        >\n            {renderMarkdown(htmlAst)}\n        </Footer>\n    );\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {AboutSection, renderMarkdown} from '../components';\n\nexport default () => {\n    const {text: {childMarkdownRemark: {htmlAst}}} = useStaticQuery(graphql`\n        query {\n            text: file(relativePath: {eq: \"about.md\"}) {\n                childMarkdownRemark {\n                    htmlAst\n                }\n            }\n        }\n    `);\n\n    return (\n        <AboutSection>\n            {renderMarkdown(htmlAst)}\n        </AboutSection>\n    );\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {FragmentList, TwoColumnGallery, createMarkdownRenderer} from '../components';\n\nconst renderMarkdown = createMarkdownRenderer({\n    p: 'li',\n});\n\nconst renderNodes = (children) => renderMarkdown({type: 'root', children});\n\nconst isTitle = ({type, tagName}) => type === 'element' && tagName === 'h1';\n\nexport default () => {\n    const {fragments: {childMarkdownRemark: {htmlAst, frontmatter: {images}}}} = useStaticQuery(graphql`\n        query {\n            fragments: file(relativePath: {eq: \"fragments.md\"}) {\n                childMarkdownRemark {\n                    htmlAst\n                    frontmatter {\n                        images {\n                            childImageSharp {\n                                fluid(maxWidth: 600) {\n                                    ...GatsbyImageSharpFluid_withWebp\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `);\n\n    const fluidImages = images.map(({childImageSharp: {fluid}}) => fluid);\n    const {children: childNodes} = htmlAst;\n\n    return (\n        <>\n            {renderMarkdown(childNodes.find(isTitle))}\n            <TwoColumnGallery images={fluidImages}>\n                <FragmentList>\n                    {renderNodes(childNodes.filter((node) => !isTitle(node)))}\n                </FragmentList>\n            </TwoColumnGallery>\n        </>\n    );\n};\n","import React from 'react';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport {TeamMember, renderMarkdown} from '../components';\n\nexport default () => {\n    const {team: {edges}} = useStaticQuery(graphql`\n        query {\n            team: allMarkdownRemark(\n                filter: {\n                    fileAbsolutePath: {glob: \"**/team/*.md\"}\n                    frontmatter: {display: {eq: true}}\n                }\n                sort: {fields: [frontmatter___order]}\n            ) {\n                edges {\n                    node {\n                        frontmatter {\n                            name\n                            photo {\n                                childImageSharp {\n                                    fluid(maxWidth: 500) {\n                                        ...GatsbyImageSharpFluid_withWebp\n                                    }\n                                }\n                            }\n                        }\n                        htmlAst\n                    }\n                }\n            }\n        }\n    `);\n\n    return (\n        <>\n            <h1>Kdo to pořádá?</h1>\n            {edges.map(({node: {htmlAst, frontmatter: {name, photo}}}) => (\n                <TeamMember\n                    key={name}\n                    title={name}\n                    image={photo.childImageSharp.fluid}\n                >\n                    {renderMarkdown(htmlAst)}\n                </TeamMember>\n            ))}\n        </>\n    );\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {FontAwesomeIcon as FAIcon} from '@fortawesome/react-fontawesome';\nimport {faEnvelope} from '@fortawesome/free-solid-svg-icons';\nimport {faFacebookF} from '@fortawesome/free-brands-svg-icons';\nimport {Button, Center} from '../components';\n\nexport default () => {\n    const {site: {siteMetadata: {contact, fbEventId}}} = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    contact\n                    fbEventId\n                }\n            }\n        }\n    `);\n    return (\n        <Center>\n            <h1>Kontakt</h1>\n            <p>Chceš se na něco zeptat? Napiš nám!</p>\n            <p>\n                <Button href={`mailto:${contact}`} outline>\n                    <FAIcon icon={faEnvelope} /> {contact}\n                </Button>\n            </p>\n            <p>Jsme aktivní i na Facebooku:</p>\n            <p>\n                <Button href={`https://www.facebook.com/events/${fbEventId}`} outline>\n                    <FAIcon icon={faFacebookF} /> Sdílej!\n                </Button>\n            </p>\n        </Center>\n    );\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {MultiRowGallery} from '../components';\n\nexport default () => {\n    const {images} = useStaticQuery(graphql`\n        query {\n            images: allFile(\n                filter: {sourceInstanceName: {eq: \"gallery\"}}\n                sort: {fields: [relativePath]}\n            ) {\n                edges {\n                    node {\n                        childImageSharp {\n                            fixed(height: 250) {\n                                ...GatsbyImageSharpFixed_withWebp\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    `);\n\n    const fluidImages = images.edges.map(({node: {childImageSharp: {fixed}}}) => fixed);\n\n    return <MultiRowGallery images={fluidImages} rows={3} />;\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {Image} from '../components';\n\nexport default () => {\n    const {image} = useStaticQuery(graphql`\n        query {\n            image: file(relativePath: {eq: \"stih.jpg\"}) {\n                childImageSharp {\n                    fluid(maxWidth: 1920) {\n                        ...GatsbyImageSharpFluid_withWebp\n                    }\n                }\n            }\n        }\n    `);\n    return (\n        <Image fluid={image.childImageSharp.fluid} />\n    );\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\nimport {Box, renderMarkdown} from '../components';\n\nexport default () => {\n    const {text: {childMarkdownRemark: {htmlAst}}} = useStaticQuery(graphql`\n        query {\n            text: file(relativePath: {eq: \"pandemic.md\"}) {\n                childMarkdownRemark {\n                    htmlAst\n                }\n            }\n        }\n    `);\n\n    return (\n        <Box>\n            {renderMarkdown(htmlAst)}\n        </Box>\n    );\n};\n","import React from 'react';\nimport {graphql, useStaticQuery} from 'gatsby';\n\nimport './style.scss';\n\nimport {Background, Navbar, Section, SEO, SummaryTable, Title} from '../components';\nimport {\n    About,\n    Contact,\n    ContactFiller,\n    Faq,\n    Footer,\n    Fragments,\n    Gallery,\n    Info,\n    Pandemic,\n    RegisterForm,\n    Team,\n} from '../containers';\n\nconst IndexPage = () => {\n    const {site: {siteMetadata: {title, subtitle, basicInfo}}} = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    subtitle\n                    basicInfo {\n                        label\n                        value\n                    }\n                }\n            }\n        }\n    `);\n    return (\n        <Background>\n            <SEO />\n            <Navbar\n                brand={title}\n                navlinks={{\n                    about: 'O akci',\n                    info: 'Informace',\n                    register: 'Přihláška',\n                    faq: 'FAQ',\n                    team: 'Tým',\n                    contact: 'Kontakt',\n                }}\n            />\n            <Title\n                title={title}\n                subtitle={subtitle}\n                more=\"about\"\n            >\n                <SummaryTable\n                    actionLink=\"register\"\n                    actionText=\"Přihlásit se\"\n                    items={basicInfo}\n                />\n            </Title>\n            <Section name=\"about\">\n                <About />\n                <Fragments />\n            </Section>\n            <Section name=\"info\">\n                <Pandemic />\n                <Info />\n                <Gallery />\n            </Section>\n            <Section name=\"register\" narrow>\n                <RegisterForm />\n            </Section>\n            <Section name=\"faq\" narrow>\n                <Faq />\n            </Section>\n            <Section name=\"team\" narrow>\n                <Team />\n                <ContactFiller />\n            </Section>\n            <Section name=\"contact\" narrow>\n                <Contact />\n            </Section>\n            <Footer />\n        </Background>\n    );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}